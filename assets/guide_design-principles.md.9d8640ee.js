import{r as y,o as e,c as l,b as t,w as D,v as A,d as p,a as o,e as i}from"./app.c08eec54.js";const F=o(`<h1 id="design-principles" tabindex="-1">Design principles <a class="header-anchor" href="#design-principles" aria-hidden="true">#</a></h1><blockquote><p><em>Exploring the design choices is not mandatory in order to use this library but it is certainly useful for better understanding the API</em></p></blockquote><p>This library aims to manage the <code>lifecycle</code>, <code>state</code> derivations and <code>mutations</code> of a mutable source. The <strong>hooks</strong> we provide are defined by 3 main functions that represent these concepts:</p><ul><li><code>init()</code> defines how the source is generated.</li><li><code>getSnapshot()</code> defines how the state is derived from the source.</li><li><code>subscribe()</code> defines how to subscribe to mutation events.</li></ul><h2 id="implicit-memoization" tabindex="-1">Implicit Memoization <a class="header-anchor" href="#implicit-memoization" aria-hidden="true">#</a></h2><p>The hooks are designed to seem like primitives and they trait memoization as <code>implicit</code>. So instead of writing:</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> init </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCallback</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Init function.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">(dep1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep2)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Dependency list.</span></span>
<span class="line"><span style="color:#A6ACCD;">  [dep1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep2]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(init)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>You directly provide the <code>dependency list</code>.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Init function.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">(dep1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep2)</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Dependency list.</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  [dep1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep2]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>If an hook accepts more functions, you can explicit the dependency list for each of them right after their definition.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// getSnapshot function.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep4)</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// getSnapshot dependency list.</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  [dep3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep4]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// subscribe function.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">subscribe</span><span style="color:#A6ACCD;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onChange</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep6)</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// subscribe dependency list.</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  [dep5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep6]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>And obviously you can omit all or just some of the dependency lists.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// getSnapshot function.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// subscribe function.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">subscribe</span><span style="color:#A6ACCD;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onChange)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>The main advantage of this choice is that you can avoid relying on <strong>useMemo</strong> or <strong>useCallback</strong> for <code>Semantic Guarantees</code>.</p><p>Also, you can inline these functions directly inside the hook without losing <code>locality</code> and avoiding the <code>verbosity</code> of <strong>useCallback</strong>. This definitely improve the code <code>readability</code>.</p><p>Unfortunately we lose the <code>linting</code> part on the dependencies, but in practice, since we are working with mutable objects, you often need to use some values that are <strong>Not</strong> <code>dependencies</code> (<em>like initialization options</em>). Most of the linting would just be disabled anyway.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#82AAFF;">useCallback</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">(options)</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Since we would use &quot;options&quot; only on initialization, we omit it.</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// eslint-disable-next-line react-hooks/exhaustive-deps</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  []</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="stability-by-default" tabindex="-1">Stability by default <a class="header-anchor" href="#stability-by-default" aria-hidden="true">#</a></h2><p>The memoization has a different default from the primitive hooks. If no dependencies are specified, the function is treated as <code>stable</code>. This means that these syntaxes are equivalent:</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#676E95;">// Empty dependency list.</span></span>
<span class="line"><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#676E95;">// Without a dependency list.</span></span>
<span class="line"><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>There are two main reason for this choice. The first is that, in practice, you never want an <code>always-unstable</code> function. Creating a new Source on each render is just not useful.</p><p>The second and main reason is that sometimes we must constraint a function to be always stable (<em>see next <a href="#polymorphism">chapter</a></em>). With stability by default, we can just Not accept its dependency list, and the constraint becomes a <code>consequence</code> of the implementation.</p><p>This have a <strong>Huge</strong> difference from introducing a new API to express this constraint. You Don&#39;t have to <code>learn</code> and <code>remember</code> new concepts based on the hook you&#39;re using, you just have to learn the general rule. The API surface is smaller and <code>coherent</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you are not sure that a function can be dynamic, just put the dependency list right after it and <code>typescript</code> will show an error if it cannot be done.</p></div><p>If for any reason (<em>like testing</em>), you need the usual behavior you can just pass an always-unstable value.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// &quot;{}&quot; will result in a different dependency each time.</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="polymorphism" tabindex="-1">Polymorphism <a class="header-anchor" href="#polymorphism" aria-hidden="true">#</a></h2><p>The last and main design principle is that by <code>constraining</code> how and where each of the 3 main <a href="#design-principles">functions</a> can be defined, we can provide better guarantees.</p><p>Each function have 2 different versions, one <strong>with</strong> constraints and one <strong>without</strong>, and you can choose between <code>2<sup>3</sup> = 8</code> different combinations to get the best set of <code>tradeoffs</code> for your use case.</p><h3 id="init" tabindex="-1"><code>Init</code> <a class="header-anchor" href="#init" aria-hidden="true">#</a></h3><p>By default <code>init</code> is allowed to perform any side-effect to initialize the source. This has the drawback of not being able to access the source during the first render, and we must provide initial values to derive the snapshots.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#676E95;">// \u2705 init can have side-effects.</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">useSnapshot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> getSource</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSource</span><span style="color:#A6ACCD;">(init)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> snapshot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \u26A0\uFE0F Note that the source is null during the first render.</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \u26A0\uFE0F We need to provide an initial snapshot.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (source </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source) </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> initialSnapshot)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// \u274C We can&#39;t access the source on render, this is a side-effect!</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> source </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSource</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>You can express the fact that you don&#39;t perform side effects inside <code>init</code> by using the following hook.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#676E95;">// \u26A0\uFE0F init cannot have side-effects.</span></span>
<span class="line"><span style="color:#676E95;">// \u2705 The source is always available.</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">useSnapshot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> source</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(init)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> snapshot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \u2705 We can always access the source to derive the snapshot.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>In this way you can avoid the previous drawbacks. As you can see the API are almost the same, but the behavior is very different!</p><h3 id="getsnapshot" tabindex="-1"><code>getSnapshot</code> <a class="header-anchor" href="#getsnapshot" aria-hidden="true">#</a></h3><p>By default <code>getSnapshot</code> and is defined locally to <code>useSnapshot</code>. Because there is no guarantee on when and where the snapshots are generated, each update will trigger a synchronous render. This has the drawback that it cannot benefit from <a href="https://reactjs.org/blog/2022/03/29/react-v18.html#what-is-concurrent-react" target="_blank" rel="noreferrer"><code>concurrent mode</code></a>.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">useSnapshot</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(init)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// \u26A0\uFE0F we cannot exploit concurrent mode.</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> snapshot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \u2705 getSnapshot is defined locally to useSnapshot.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  subscribe</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>To exploit <a href="https://reactjs.org/blog/2022/03/29/react-v18.html#what-is-concurrent-react" target="_blank" rel="noreferrer"><code>concurrent mode</code></a> you need the snapshot to be unique and not to be dynamic (<em>does not accept the dependency list</em>).</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/atomic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#676E95;">// \u2705 we can exploit concurrent mode.</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">useSnapshot</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  init</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \u26A0\uFE0F we can only derive one snapshot.</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \u26A0\uFE0F the snapshot cannot be dynamic.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  subscribe</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="subscribe" tabindex="-1"><code>subscribe</code> <a class="header-anchor" href="#subscribe" aria-hidden="true">#</a></h3><p>By default <code>subscribe</code> is allowed to perform any side-effect and is defined locally to <code>useSnapshot</code>. This has the drawback of having to rely on equality comparisons to determine snapshot changes.</p><p>This is necessary due to the order in which side effects are performed. A child component may make changes to the source before useSnapshot can actually subscribe.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">useSnapshot</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(init)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bar</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \u26A0\uFE0F Since the snapshot is an object, we must manually check for changes.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">currentSnapshot</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">snapshot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bar</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// If there is a current snapshot.</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">currentSnapshot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// If &quot;foo&quot; and &quot;bar&quot; have not changed.</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">snapshot</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">currentSnapshot</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">snapshot</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">currentSnapshot</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// \u26A0\uFE0F We must return the currentSnapshot to avoid an infinite render loop.</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">currentSnapshot</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">snapshot</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \u2705 subscribe locally to useSnapshot.</span></span>
<span class="line"><span style="color:#A6ACCD;">  subscribe</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>You can instead subscribe inside <code>useSource</code>. Since it controls the lifecycle of the source, it is able to subscribe as soon as the source is generated, and it can rely on change events instead of equality comparisons to determine snapshot changes.</p><p>Here the drawbacks are that the subscription is shared among all snapshots, it cannot be dynamic (<em>does not accept the dependency list</em>) and in case of Pure sources, it cannot perform any side effects outside of the source.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/with-contract</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">useSnapshot</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  init</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \u26A0\uFE0F subscribe must be shared to all snapshots.</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \u26A0\uFE0F subscribe cannot be dynamic.</span></span>
<span class="line"><span style="color:#A6ACCD;">  subscribe</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bar</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \u2705 No need to checks for changes.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> [source</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> source</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bar]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="import-helper" tabindex="-1">Import helper <a class="header-anchor" href="#import-helper" aria-hidden="true">#</a></h3><p>Since each function has 2 versions, we can build up to <code>2<sup>3</sup> = 8</code> different hooks! Below you can select the constraints you want to use and obtain the corresponding <code>import</code>.</p>`,56),C=i(),u=t("code",null,"Init",-1),d=i(" / "),h=i(),b=t("code",null,"getSnapshot",-1),g=i(" / "),m=i(),f=t("code",null,"subscribe",-1),_={key:0},v=o(`<div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,1),S=[v],E={key:1},w=o(`<div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/with-contract</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,1),x=[w],T={key:2},k=o(`<div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/atomic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,1),P=[k],I={key:3},q=o(`<div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/with-contract/atomic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,1),V=[q],N={key:4},j=o(`<div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,1),R=[j],z={key:5},B=o(`<div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/with-contract</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,1),W=[B],U={key:6},M=o(`<div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/atomic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,1),Y=[M],H={key:7},O=o(`<div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/with-contract/atomic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,1),G=[O],J=o(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When you need <code>use-mutable-source</code>, always start thinking about how your use case can fit with those constraints. The more you can fit, the better!</p></div><h2 id="unresolved-questions" tabindex="-1">Unresolved questions <a class="header-anchor" href="#unresolved-questions" aria-hidden="true">#</a></h2><p>Below is a list of unresolved questions about some design choices. If you have any opinion about any of them, feel free to open an <a href="https://github.com/paol-imi/use-mutable-source/issues" target="_blank" rel="noreferrer"><code>issue</code></a> to discuss it!</p><h3 id="stability-by-default-1" tabindex="-1">Stability by default <a class="header-anchor" href="#stability-by-default-1" aria-hidden="true">#</a></h3><p>Stability is a very handy default, but... It&#39;s a new concept to <code>learn</code>, and this represents no small <code>cost</code> for a hook that aims to be used like a primitive.</p><p>The first prototype of <code>use-mutable-source</code> was actually enforcing stability by requiring an empty dependency list. Typescript and a bunch of runtime warnings would have let the user notice if some dependencies were used where they weren&#39;t allowed.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/atomic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  []</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// Forced stability with an empty Dependency list.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  []</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// Forced stability with an empty Dependency list.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">subscribe</span><span style="color:#A6ACCD;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onChange)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>This approach was later replaced by the current one. Which of the two is better remains an open question for now.</p><h3 id="pure-contracts-and-pure-sources" tabindex="-1">Pure Contracts and Pure Sources <a class="header-anchor" href="#pure-contracts-and-pure-sources" aria-hidden="true">#</a></h3><p>Currently, we solve the subscription timing problem in Pure Sources by using the contract during render. This requires the contract to be pure and also requires the source to be <code>garbage collectable</code> after the contract has been used.</p><p>This last requirements should be satisfied most of the time without any additional work, but it is not an easy thing to reason about.</p><p>An alternative could be to subscribe inside <code>useInsertionEffect</code>. It would run before <code>useLayoutEffect</code> and <code>useEffect</code>, and it wouldn&#39;t be possible to dispatch state updates inside it, so we would be sure to subscribe before any changes can be performed.</p><p>The main problem is that this is Not supported by versions of React prior to 18. Also the React team has discouraged its use outside the scope of css-in-js libraries, but that&#39;s something we could explore more.</p>`,14),Z=JSON.parse('{"title":"Design principles","description":"","frontmatter":{},"headers":[{"level":2,"title":"Implicit Memoization","slug":"implicit-memoization","link":"#implicit-memoization","children":[]},{"level":2,"title":"Stability by default","slug":"stability-by-default","link":"#stability-by-default","children":[]},{"level":2,"title":"Polymorphism","slug":"polymorphism","link":"#polymorphism","children":[{"level":3,"title":"Init","slug":"init","link":"#init","children":[]},{"level":3,"title":"getSnapshot","slug":"getsnapshot","link":"#getsnapshot","children":[]},{"level":3,"title":"subscribe","slug":"subscribe","link":"#subscribe","children":[]},{"level":3,"title":"Import helper","slug":"import-helper","link":"#import-helper","children":[]}]},{"level":2,"title":"Unresolved questions","slug":"unresolved-questions","link":"#unresolved-questions","children":[{"level":3,"title":"Stability by default","slug":"stability-by-default-1","link":"#stability-by-default-1","children":[]},{"level":3,"title":"Pure Contracts and Pure Sources","slug":"pure-contracts-and-pure-sources","link":"#pure-contracts-and-pure-sources","children":[]}]}],"relativePath":"guide/design-principles.md"}'),L={name:"guide/design-principles.md"},$=Object.assign(L,{setup(K){const s=y(!0),n=y(!0),a=y(!0);return(Q,c)=>(e(),l("div",null,[F,t("p",null,[D(t("input",{type:"checkbox","onUpdate:modelValue":c[0]||(c[0]=r=>s.value=r)},null,512),[[A,s.value]]),C,u,d,D(t("input",{type:"checkbox","onUpdate:modelValue":c[1]||(c[1]=r=>n.value=r)},null,512),[[A,n.value]]),h,b,g,D(t("input",{type:"checkbox","onUpdate:modelValue":c[2]||(c[2]=r=>a.value=r)},null,512),[[A,a.value]]),m,f]),!s.value&&!n.value&&!a.value?(e(),l("div",_,S)):p("",!0),!s.value&&!n.value&&a.value?(e(),l("div",E,x)):p("",!0),!s.value&&n.value&&!a.value?(e(),l("div",T,P)):p("",!0),!s.value&&n.value&&a.value?(e(),l("div",I,V)):p("",!0),s.value&&!n.value&&!a.value?(e(),l("div",N,R)):p("",!0),s.value&&!n.value&&a.value?(e(),l("div",z,W)):p("",!0),s.value&&n.value&&!a.value?(e(),l("div",U,Y)):p("",!0),s.value&&n.value&&a.value?(e(),l("div",H,G)):p("",!0),J]))}});export{Z as __pageData,$ as default};
