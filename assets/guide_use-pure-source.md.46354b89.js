import{_ as s,o as n,c as a,a as e}from"./app.9409df1f.js";const C=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[{"level":2,"title":"Define the source","slug":"define-the-source"},{"level":2,"title":"Derive a snapshot","slug":"derive-a-snapshot"},{"level":2,"title":"Subscribe to changes","slug":"subscribe-to-changes"},{"level":2,"title":"Comparing snapshots","slug":"comparing-snapshots"},{"level":2,"title":"Exploit concurrent mode","slug":"exploit-concurrent-mode"},{"level":2,"title":"Contracts","slug":"contracts-avoid-comparing-snapshots"},{"level":3,"title":"Contracts and concurrent mode","slug":"contracts-and-concurrent-mode"},{"level":2,"title":"Examples","slug":"examples"}],"relativePath":"guide/use-pure-source.md"}'),o={name:"guide/use-pure-source.md"},p=e(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h1><p><code>usePureSource</code> enables React components to safely and efficiently use a mutable <code>Pure</code> source, and derive state from it. A source is considered <code>Pure</code> if its initialization is side-effects free and doesn&#39;t require access to the DOM or to a Ref.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="define-the-source" tabindex="-1">Define the source <a class="header-anchor" href="#define-the-source" aria-hidden="true">#</a></h2><p>You can define an <code>init</code> function that generates a Pure source. <code>usePureSource</code> will take care of generating it when the component renders.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">useSnapshot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> source</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the source.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>If the source lifecycle depends on some variables, you may pass the <code>dependency list</code> as a second parameter. The source will be recreated every time a dependency changes.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">useSnapshot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> source</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the source.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">(dep1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep2)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the dependency list.</span></span>
<span class="line"><span style="color:#A6ACCD;">  [dep1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep2]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="derive-a-snapshot" tabindex="-1">Derive a snapshot <a class="header-anchor" href="#derive-a-snapshot" aria-hidden="true">#</a></h2><p>React strictly <a href="./introduction.html#use-react-responsibly-\u269B\uFE0F">forbid</a> to read a mutable object on render, but you can safely derive some state from it using <code>useSnapshot</code>. You can provide a <strong>pure</strong> function that generates the (<strong>Immutable</strong>) snapshot from the source as a first parameter.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> snapshot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Derives a snapshot.</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Subscribes to all the events that may change the snapshot.</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// We&#39;ll dig into it in the next chapter.</span></span>
<span class="line"><span style="color:#A6ACCD;">  subscribeToChanges</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>After each render, <code>useSnapshot</code> will <a href="#comparing-snapshots">compare</a> the new snapshot with the current one, and if they are not the same, it will force a re-render so that the the components always see the latest snapshot.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>use-mutable-source</code> use <a href="https://github.com/reactwg/react-18/discussions/86" target="_blank" rel="noreferrer"><code>use-sync-external-storage</code></a> under the hood, so that your can safely use the snapshot.</p></div><p><code>getSnapshot</code> is considered stable by default. If you need it to be dynamic, you may pass the dependency list right after.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> snapshot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Derives the snapshot using some variables.</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep2)</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the &quot;getSnapshot&quot; dependency list.</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  [dep1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep2]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Subscribes to changes.</span></span>
<span class="line"><span style="color:#A6ACCD;">  subscribe</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="subscribe-to-changes" tabindex="-1">Subscribe to changes <a class="header-anchor" href="#subscribe-to-changes" aria-hidden="true">#</a></h2><p>To make the snapshot always up to date, you have to provide a <code>subscribe</code> function as a second parameter. The function has to subscribe to all the events that may change the snapshot, using the <code>onChange</code> callback, and has to return an unsubscribe function.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> snapshot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  getSnapshot</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the subscription.</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Subscribes to the events that will change the snapshot.</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">subscribe</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Returns a callback to unsubscribe.</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">unsubscribe</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><code>subscribe</code> is considered stable by default. If you need it to be dynamic, you may pass the dependency list right after. <code>useSnapshot</code> will resubscribe each time a dependency changes.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> snapshot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  getSnapshot</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the subscription.</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Subscribes to the events based on some dependencies.</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">subscribe</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dep1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dep2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Returns a callback to unsubscribe.</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">unsubscribe</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dep1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dpe2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the &quot;subscription&quot; dependency list.</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  [dep1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep2]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="comparing-snapshots" tabindex="-1">Comparing snapshots <a class="header-anchor" href="#comparing-snapshots" aria-hidden="true">#</a></h2><p>When the immutable snapshot is an <code>object</code>, since it is derived from a mutable source, <code>useSnapshot</code> cannot rely on reference equality to determine if it has changed.</p><p>In these cases, it is necessary to manually compare the current snapshot with the generated snapshot, and return the current one if they are semantically equal.</p><p>A classic example is using a shallow comparison. <code>use-mutable-source</code> expose the comparer for your convenience.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shallowEqual</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Derives a snapshot.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">currentSnapshot</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">snapshot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// If the two snapshots are semantically equals, we can return the current</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// one to bailout from the update.</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shallowEqual</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">currentSnapshot</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">snapshot</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">currentSnapshot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">snapshot</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  subscribe</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Since <code>useSnapshot</code> will try to re-render each time the snapshot changes, if it is unable to determine that two snapshot are equal it may cause an infinite render loop. Check the next <a href="#contracts-avoid-comparing-snapshots">chapter</a> to see how to avoid equality comparisons.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>There is currently a limitation with <strong>typescript</strong> when you access <code>currentSnapshot</code>, and it is unable to infer the snapshot type. In those cases you should manually provide the snapshot type <code>useSnapshot&lt;SnapshotType&gt;()</code>.</p></div><h2 id="exploit-concurrent-mode" tabindex="-1">Exploit concurrent mode <a class="header-anchor" href="#exploit-concurrent-mode" aria-hidden="true">#</a></h2><p>By default, useSnapshot will use <a href="https://github.com/reactwg/react-18/discussions/86" target="_blank" rel="noreferrer"><code>use-sync-external-storage</code></a> to manage the subscription. Because there is no guarantee on when and where the snapshots are generated, each update will trigger a synchronous render.</p><p>This behavior is safe, but cannot benefit from <a href="https://reactjs.org/blog/2022/03/29/react-v18.html#what-is-concurrent-react" target="_blank" rel="noreferrer"><code>concurrent mode</code></a>. For this reason, we provide a compact API that we call <code>atomic</code>.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/atomic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>By <code>constraining</code> how and where you can derive a snapshot, we are able to exploit concurrent mode. We expect this to fit many use cases and we recommend using it whenever possible.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#676E95;">// Instead of useSnapshot we directly have the unique snapshot.</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">snapshot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> source</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the source.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Derives a snapshot.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Subscribes to changes and returns the unsubscribe function.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">subscribe</span><span style="color:#A6ACCD;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onChange)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Again, all functions are considered stable by default. Unlike before, <code>getSnapshot</code> and <code>init</code> <strong>Cannot</strong> be dynamic (and their dependency lists cannot be defined). This is the tradeoff to achieve better performance.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you are not sure that a function can be dynamic, just put the dependency list right after it and <code>typescript</code> will show an error if it cannot be done.</p></div><h2 id="contracts-avoid-comparing-snapshots" tabindex="-1">Contracts <small>(<em>avoid comparing snapshots</em>)</small> <a class="header-anchor" href="#contracts-avoid-comparing-snapshots" aria-hidden="true">#</a></h2><p>You may be wondering why we need an equality comparison to determine if a snapshot has changed, when useSnapshot actually <code>subscribes</code> to change events.</p><p>This is necessary due to the order in which side effects are performed. A child component may make changes to the source before <code>useSnapshot</code> can actually subscribe.</p><p>To solve this we introduce a slightly different concept from subscriptions, that we call <code>contracts</code>.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/with-contract</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>A <code>contract</code> is a function that register a callback to change events and doesn&#39;t perform any (other) side effect (it is <code>Pure</code> in a sense). Since it is side-effect free, it doesn&#39;t accept any unsubscribe callback in return.</p><p>By passing the contract directly to useSource, we are able to subscribe right after the source is generated, and remove the timing problem.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">useSnapshot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> source</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the source.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the contract.</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">subscribe</span><span style="color:#A6ACCD;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onChange)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><code>useSnapshot</code> will rely on that contract to listen for change events, no subscription has to be provided.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#676E95;">// Derives a snapshot.</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> snapshot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSnapshot</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Again, all functions are considered stable by default. Unlike before, the <code>contract</code> <strong>Cannot</strong> be dynamic (and its dependency lists cannot be defined) and is shared by all <code>snapshots</code>.</p><p>Also note that since there is no clean-up phase, you <strong>Must</strong> ensure that the source is <code>garbage collectable</code> even after the contract has registered the callback.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Those are the tradeoffs to achieve the best performance and dx that <code>use-mutable-source</code> can provide. The constraints are quite restrictive, but they should cover most use cases. In future we may extend the contracts concept to be more flexible.</p></div><h3 id="contracts-and-concurrent-mode" tabindex="-1">Contracts and concurrent mode <a class="header-anchor" href="#contracts-and-concurrent-mode" aria-hidden="true">#</a></h3><p>Lastly, we also provide the <code>atomic</code> equivalent.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">usePureSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use-mutable-source/with-contract/atomic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Note that the contract comes <strong>before</strong> getSnapshot.</p><div class="language-tsx"><button class="copy"></button><span class="lang">tsx</span><pre><code><span class="line"><span style="color:#676E95;">// Instead of useSnapshot we directly have the unique snapshot.</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">snapshot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> source</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">usePureSource</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the source.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Source</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Defines the contract.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">onChange</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">subscribe</span><span style="color:#A6ACCD;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onChange)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Derives a snapshot.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSnapshot</span><span style="color:#A6ACCD;">(source)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Again, all functions are considered stable by default and none can be dynamic (their dependency lists cannot be defined).</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-hidden="true">#</a></h2><p>Check some of the <a href="./../examples/use-media-query.html">examples</a>.</p>`,57),l=[p];function t(c,r,y,i,D,A){return n(),a("div",null,l)}const h=s(o,[["render",t]]);export{C as __pageData,h as default};
