import{_ as e,o as a,c as s,a as t}from"./app.faf97d0f.js";const y=JSON.parse('{"title":"Getting started","description":"","frontmatter":{},"headers":[{"level":2,"title":"Examples","slug":"examples","link":"#examples","children":[]},{"level":2,"title":"Adding to your Project","slug":"adding-to-your-project","link":"#adding-to-your-project","children":[]},{"level":2,"title":"Design philosophy","slug":"design-philosophy","link":"#design-philosophy","children":[]}],"relativePath":"guide/getting-started.md"}'),n={name:"guide/getting-started.md"},o=t(`<h1 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h1><p>This library aims to manage the <code>lifecycle</code>, <code>state</code> derivations and <code>mutations</code> of a mutable source. To achieve that we provide 2 main hooks, depending on your use case you can choose one or the other and go through their documentation:</p><table><thead><tr><th><a href="./use-source.html"><code>useSource</code></a></th><th style="text-align:left;"><span style="font-weight:lighter;">If the source initialization have side-effects, like accessing the DOM or a Ref.</span></th></tr></thead><tbody><tr><td><a href="./use-pure-source.html"><code>usePureSource</code></a></td><td style="text-align:left;">If the source initialization have No side-effects.</td></tr></tbody></table><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-hidden="true">#</a></h2><p>Want to see use-mutable-source in action right away? Look at the <a href="./../examples/use-media-query.html">examples</a>!</p><h2 id="adding-to-your-project" tabindex="-1">Adding to your Project <a class="header-anchor" href="#adding-to-your-project" aria-hidden="true">#</a></h2><p>Don&#39;t forget to add <code>use-mutable-source</code> to your project!</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#676E95;"># with npm</span></span>
<span class="line"><span style="color:#A6ACCD;">npm install use-mutable-source</span></span>
<span class="line"></span></code></pre></div><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#676E95;"># with yarn</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn add use-mutable-source</span></span>
<span class="line"></span></code></pre></div><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#676E95;"># with pnpm</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm add use-mutable-source</span></span>
<span class="line"></span></code></pre></div><h2 id="design-philosophy" tabindex="-1">Design philosophy <a class="header-anchor" href="#design-philosophy" aria-hidden="true">#</a></h2><p>Once you have read the documentation, if you&#39;re curious, you may also read the <a href="./design-principles.html">Design Principles</a> the hooks are based on. This could help you to have a broader view on the API surface area.</p>`,12),i=[o];function r(l,d,c,p,h,u){return a(),s("div",null,i)}const m=e(n,[["render",r]]);export{y as __pageData,m as default};
